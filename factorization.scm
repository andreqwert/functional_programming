(define (factorize expr)
  (if (equal? (and ; должно быть соответствие по всем пунктам (везде #t)
              ; если первая часть (нулевой элемент) выражения равна минусу
              (equal? (car expr) '-)
              ; если вторая часть (первый элемент) выржания равен expr
              (list? (list-ref expr 1))
              ; если первый элемент второй части выражения - возведение в степень
              (equal? (car (list-ref expr 1)) 'exp)
              ; cadr = (car (cdr '1 2 3)) = 2
              ; если второй элемент второй части выражения - символ
              (symbol? (cadr (list-ref expr 1)))
              ; (caddr '(1 2 3 4)) = 3
              ; если третий элемент второй части выражения - число
              (number? (caddr (list-ref expr 1)))
              ; если третий элемент второй части выражения - это число 2
              (= (caddr (list-ref expr 1)) 2)
              ; если вторая третья часть выражения - список
              (list? (list-ref expr 2))
              ; если первый эл-т третьей части выражения - это степень
              (equal? (car (list-ref expr 2)) 'exp)
              ; если второй эл-т третьей части выражения - это символ
              (symbol? (cadr (list-ref expr 2)))
              ; если третий эл-т третьей части выражения - это число
              (number? (caddr (list-ref expr 2)))
              ; если третий эл-т третьей части выражения - это число 2
              (= (caddr (list-ref expr 2)) 2))
              #t) ; и если все эти условия выполняются, то
      
      ; создаем список, в котором первый элемент - знак умножения, а второй - это
      ;   список, в котором первый элемент - знак минус между...
      ;     ... вторым элементом второй части исходного выражения
      ;     ... и вторым элементом третьей части исходного выражения
      ;   а второй элемент - это
      ;     список, в котором первый элемент - знак плюс между...
      ;       ... вторым элементом второй части исходного выражения
      ;       ... и вторым элементом третьей части исходного выражения
      (list '* (list '- (cadr (list-ref expr 1)) (cadr (list-ref expr 2))) (list '+ (cadr (list-ref expr 1)) (cadr (list-ref expr 2))))))

(factorize '(- (exp a 2) (exp b 2)))
