; Реализуйте процедуру (replace pred? proc xs), которая "заменяет" в списке xs все элементы, 
; удовлетворяющие предикату pred?, на результат применения к каждому из этих элементов процедуры одного аргумента proc. 
; Примеры применения процедуры:

; (replace zero? (lambda (x) (+ x 1)) '(0 1 2 3 0))   ⇒ (1 1 2 3 1)
; (replace odd?  (lambda (x) (* 2 x)) '(1 2 3 4 5 6)) ⇒ (2 2 6 4 10 6)
; (replace even? (lambda (x) (/ x 2)) '(1 3 5 7))     ⇒ (1 3 5 7)
; (replace (lambda (x) (> 0 x)) exp '())              ⇒ ()

(define (replace pred? proc xs) 
(if (null? xs) xs ; если список нулевой - вернуть список
(if (pred? (car xs)) ; если первый эл-т xs удовлетворяет предикату...
    ; сконструировать список из головы и хвоста, где
    ; голова = первый эл-т списка, на который действует процедура proc
    ; хвост = (второй, ..., энный) эл-ты списка
    (cons (proc (car xs)) (replace pred? proc (cdr xs)))
    ; иначе сконструировать список из головы и хвоста, где
    ; голова = первый эл-т списка (на который не действуют никакие процедуры)
    ; хвост = (второй, ..., энный) эл-ты списка
(cons (car xs) (replace pred? proc (cdr xs)))))) 

(replace zero? (lambda (x) (+ x 1)) '(0 1 2 3 0))

; cons <голова> <хвост>
